// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.fitatu.barcodescanner.fitatu_barcode_scanner

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class CameraConfig (
  val textureId: Long,
  val previewWidth: Long,
  val previewHeight: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): CameraConfig {
      val textureId = list[0].let { if (it is Int) it.toLong() else it as Long }
      val previewWidth = list[1].let { if (it is Int) it.toLong() else it as Long }
      val previewHeight = list[2].let { if (it is Int) it.toLong() else it as Long }
      return CameraConfig(textureId, previewWidth, previewHeight)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      textureId,
      previewWidth,
      previewHeight,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CameraImage (
  val cropRect: CropRect,
  val width: Long,
  val height: Long,
  val rotationDegrees: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): CameraImage {
      val cropRect = CropRect.fromList(list[0] as List<Any?>)
      val width = list[1].let { if (it is Int) it.toLong() else it as Long }
      val height = list[2].let { if (it is Int) it.toLong() else it as Long }
      val rotationDegrees = list[3].let { if (it is Int) it.toLong() else it as Long }
      return CameraImage(cropRect, width, height, rotationDegrees)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      cropRect.toList(),
      width,
      height,
      rotationDegrees,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CropRect (
  val left: Long,
  val top: Long,
  val right: Long,
  val bottom: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): CropRect {
      val left = list[0].let { if (it is Int) it.toLong() else it as Long }
      val top = list[1].let { if (it is Int) it.toLong() else it as Long }
      val right = list[2].let { if (it is Int) it.toLong() else it as Long }
      val bottom = list[3].let { if (it is Int) it.toLong() else it as Long }
      return CropRect(left, top, right, bottom)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      left,
      top,
      right,
      bottom,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ScannerOptions (
  val tryHarder: Boolean,
  val tryRotate: Boolean,
  val tryInvert: Boolean,
  val qrCode: Boolean,
  val cropPercent: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ScannerOptions {
      val tryHarder = list[0] as Boolean
      val tryRotate = list[1] as Boolean
      val tryInvert = list[2] as Boolean
      val qrCode = list[3] as Boolean
      val cropPercent = list[4] as Double
      return ScannerOptions(tryHarder, tryRotate, tryInvert, qrCode, cropPercent)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      tryHarder,
      tryRotate,
      tryInvert,
      qrCode,
      cropPercent,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object FitatuBarcodeScannerHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ScannerOptions.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is ScannerOptions -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface FitatuBarcodeScannerHostApi {
  fun init(options: ScannerOptions)
  fun setTorchEnabled(isEnabled: Boolean)
  fun release()

  companion object {
    /** The codec used by FitatuBarcodeScannerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      FitatuBarcodeScannerHostApiCodec
    }
    /** Sets up an instance of `FitatuBarcodeScannerHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: FitatuBarcodeScannerHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.FitatuBarcodeScannerHostApi.init", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val optionsArg = args[0] as ScannerOptions
            var wrapped: List<Any?>
            try {
              api.init(optionsArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.FitatuBarcodeScannerHostApi.setTorchEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val isEnabledArg = args[0] as Boolean
            var wrapped: List<Any?>
            try {
              api.setTorchEnabled(isEnabledArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.FitatuBarcodeScannerHostApi.release", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.release()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object FitatuBarcodeScannerFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CameraConfig.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CameraImage.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CropRect.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is CameraConfig -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is CameraImage -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is CropRect -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class FitatuBarcodeScannerFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by FitatuBarcodeScannerFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      FitatuBarcodeScannerFlutterApiCodec
    }
  }
  fun onTextureChanged(cameraConfigArg: CameraConfig?, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.FitatuBarcodeScannerFlutterApi.onTextureChanged", codec)
    channel.send(listOf(cameraConfigArg)) {
      callback()
    }
  }
  fun result(codeArg: String?, cameraImageArg: CameraImage, errorArg: String?, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.FitatuBarcodeScannerFlutterApi.result", codec)
    channel.send(listOf(codeArg, cameraImageArg, errorArg)) {
      callback()
    }
  }
  fun onTorchStateChanged(isEnabledArg: Boolean, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.FitatuBarcodeScannerFlutterApi.onTorchStateChanged", codec)
    channel.send(listOf(isEnabledArg)) {
      callback()
    }
  }
}
